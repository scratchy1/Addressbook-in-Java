package listwitharray;

public class ListWithArray2<ET> {

    private Object[] entries;

    private int nextFreeIndex = 0;

    public ListWithArray2(int initialCapacity) {
        entries = new Object[initialCapacity < 1 ? 1 : initialCapacity];
    }

    ET getLast() {
        if (nextFreeIndex != 0) {
            return (ET) entries[nextFreeIndex - 1];
        } else {
            throw new java.util.NoSuchElementException();
        }
    }

    ET removeLast() {
        if (nextFreeIndex > 0) {
            Object e = entries[nextFreeIndex - 1];
            entries[nextFreeIndex - 1] = null;
            nextFreeIndex--;
            return (ET) e;
        } else {
            throw new java.util.NoSuchElementException();
        }
    }

    void addLast(ET e) {
        if (nextFreeIndex >= entries.length) {
            doubleEntryArray();
        }
        entries[nextFreeIndex] = e;
        nextFreeIndex++;
    }

    private void doubleEntryArray() {
        Object[] newArray = new Object[entries.length * 2];
        for (int i = 0; i < entries.length; i++) {
            newArray[i] = entries[i];
        }
        entries = newArray;
    }

    int getSize() {
        return (nextFreeIndex);
    }
}
